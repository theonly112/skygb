#ifndef MEMORY_H
#define MEMORY_H
#include "System.h"
#include "Defines.h"

class System;


const u8 ioReset[0x100] = {
	0x0F, 0x00, 0x7C, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
	0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00, 0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
	0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
	0x91, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
	0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
	0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
	0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
	0x45, 0xEC, 0x52, 0xFA, 0x08, 0xB7, 0x07, 0x5D, 0x01, 0xFD, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,
	0x0B, 0xF8, 0xC2, 0xCE, 0xF4, 0xF9, 0x0F, 0x7F, 0x45, 0x6D, 0x3D, 0xFE, 0x46, 0x97, 0x33, 0x5E,
	0x08, 0xEF, 0xF1, 0xFF, 0x86, 0x83, 0x24, 0x74, 0x12, 0xFC, 0x00, 0x9F, 0xB4, 0xB7, 0x06, 0xD5,
	0xD0, 0x7A, 0x00, 0x9E, 0x04, 0x5F, 0x41, 0x2F, 0x1D, 0x77, 0x36, 0x75, 0x81, 0xAA, 0x70, 0x3A,
	0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF, 0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00
};

class IMemory
{
public:
	virtual ~IMemory() {}
	virtual uint8_t ReadByte(uint16_t addr) = 0;
	virtual void WriteByte(uint16_t addr, uint8_t value) = 0;
	virtual uint16_t ReadWord(uint16_t addr) = 0;
	virtual void WriteWord(uint16_t addr, uint16_t value) = 0;
	virtual uint8_t* GetOam() = 0;
	virtual uint8_t* GetVRam() = 0;
	virtual void Reset() = 0;
};

class IMbc
{
public:
	virtual ~IMbc()
	{
	}
	virtual uint8_t ReadByte(uint16_t addr) = 0;
	virtual void WriteByte(uint16_t addr, uint8_t value) = 0;
	virtual void LoadRom(std::vector<uint8_t> rom) = 0;
};

class Memory : public IMemory
{
	uint8_t sram[0x2000];
	uint8_t io  [0x0100];
	uint8_t wram[0x2000];
	uint8_t hram[0x0080];
	uint8_t oam[0x0100];
	uint8_t vram[0x2000];
	std::vector<uint8_t> rom;

	System* system;
	IMbc* mbc;
	void Copy(uint16_t destination, uint16_t source, uint16_t length);
public:

	uint8_t* GetOam() override;
	uint8_t* GetVRam() override;
	explicit Memory(System* system);
	uint8_t ReadByte(uint16_t addr) override;
	void WriteByte(uint16_t addr, uint8_t value) override;
	uint16_t ReadWord(uint16_t addr) override;
	void WriteWord(uint16_t addr, uint16_t value) override;

	void Reset() override;

	void SetMbc(IMbc* memory);
};


class NoMbc : public IMbc
{
	const int BANK_SIZE = 0x4000;
	std::vector<std::vector<uint8_t>> m_rom;
	std::vector<uint8_t> m_ram;
	int m_romBanks;
public:
	explicit NoMbc(int romSize, System* system);
	uint8_t ReadByte(uint16_t addr) override;
	void WriteByte(uint16_t addr, uint8_t value) override;
	void LoadRom(std::vector<uint8_t> rom) override;
};

class Mbc1Memory : public IMbc
{
	const int BANK_SIZE = 0x4000;
	int m_selectedRomBank;
	int m_selectedRamBank;
	bool m_ramMode;
	int m_romBanks;
	std::vector<std::vector<uint8_t>> m_rom;
	std::vector<std::vector<uint8_t>> m_ram;
public:
	explicit Mbc1Memory(int romSize, System* system);
	uint8_t ReadByte(uint16_t addr) override;
	void WriteByte(uint16_t addr, uint8_t value) override;
	void LoadRom(std::vector<uint8_t> rom) override;

};

class Mbc3Memory : public IMbc
{
	const int BANK_SIZE = 0x4000;
	int m_selectedRomBank;
	int m_selectedRamBank;
	bool m_ramTimerEnabled;
	bool m_ramMode;
	int m_romBanks;
	std::vector<std::vector<uint8_t>> m_rom;
	std::vector<std::vector<uint8_t>> m_ram;
public:
	explicit Mbc3Memory(int romSize, System* system);
	uint8_t ReadByte(uint16_t addr) override;
	void WriteByte(uint16_t addr, uint8_t value) override;
	void LoadRom(std::vector<uint8_t> rom) override;

};

#endif